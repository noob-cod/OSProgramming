"""
@Date: 2021/7/31 下午4:36
@Author: Chen Zhang
@Brief: 条件变量

1、概念
    条件变量类似于一种锁，当线程不满足条件时会进入休眠状态，当条件满足后会被唤醒

2、Python原语
    申请（创建）条件变量：condition = threading.Condition()  # 底层自动申请配套的互斥锁
    加锁：condition.acquire()  # 底层自动给互斥锁加锁
    解锁：condition.release()  # 底层自动给互斥锁解锁
    等待（线程睡眠）：condition.wait()
    通知（唤醒线程）：condition.notify()

3、条件变量Python实现的原理（个人理解）
    本质：两个互斥锁，一个作为底层锁控制线程同步，一个作为上层锁用于条件变量内线程间同步
    工作过程：
        wait()方法：
            （1）传入一个互斥锁（或者由条件变量类自动创建）作为底层锁；
            （2）为当前线程创建一个互斥锁作为上层锁，给该上层互斥锁进行加锁；
            （3）将上层锁对象加入条件变量的等待队列中，同时当前线程释放底层锁，并保留锁底层锁的状态，
                然后进入休眠状态，等待被notify()方法唤醒；
            （4）线程尝试对上层锁进行加锁操作，若没有其他线程将等待队列中该上层锁解锁，则该上层锁
                的acquire()方法将始终处于阻塞状态；
            （5）当有其他线程解锁了该线程在等待队列中的上层锁，即执行了notify()方法，则该线程对
                上层锁的加锁操作将成功，相当于收到了唤醒的信号，之后进行底层锁的加锁（或状态恢复）
                尝试删除等待队列中的上层锁。

        notify()方法：
            （1）获得所持有的条件变量的等待队列中的一个或多个上层锁；
            （2）对获得的上层锁逐个解锁，即相当于发出唤醒线程的信号；
            （3）尝试删除等待队列中已经被解锁的上层锁。
"""

if __name__ == '__main__':
    pass
